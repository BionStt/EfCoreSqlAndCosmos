@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Home Page";
}

<h2>Welcome to this database performance app.</h2>

<p class="h4">
    This application show different ways to performance tune a SQL database.
</p>
<p>
    This example application is a simple book selling site which list books. These books have a many-to-many relationship to book authors and
    a one-to-many relationship to a series of reviews of the book. Sorting by the average review votes is both a important feature for the users
    and a challenge to do quickly.
</p>
<p>
    The books and the authors were scraped from the internet to give normal looking book names/authors.
    When you run the application the first time it will fill the database(s) with about 65 books so that you can see it working.
    <i>NOTE: There is a Admin->Generate feature which can generate a large number of books for performance tests.</i>
</p>
<p>
    There are three types of database access code that it contains:
</p>
<ul>
    <li>
        <strong>Books (SQL):</strong> This is uses a good, but not performanced-tuned EF Core query.
        <br />
        I haven't got an specific article on this, but I covered it in my book <strong><a href="http://bit.ly/2m8KRAZ">Entity Framework Core in Action</a></strong>.
    </li>
    <li>
        <strong>Books, event updates:</strong> This uses cached values for the author's names and the review values to provide superior performance.
        <br />
        I have an article called <strong><a href="#">A technique for building high-performance databases with EF Core</a></strong> which describes how I did this.
    </li>
    <li>
        @if (Configuration["StartupMode"] != StartupModes.SqlAndCosmosDb.ToString())
        {
            <span><strong>Books (NoSQL):</strong></span>
            <span class="h3 text-danger">This is currently disabled</span>
            <span><i>- see Readme.md file for more information on this.</i></span>
        }
        else
        {
            <span><strong>Books (NoSQL):</strong> This uses a two-database CQRS design, with NoSQL (Cosmos Db) read-side database to provide superior performance and scalability.</span>
        }
        <br />
        I have an article called
        <strong>
            <a href="https://www.thereformedprogrammer.net/building-a-robust-cqrs-database-with-ef-core-and-cosmos-db/">
                Building a robust CQRS database with EF Core and Cosmos DB
            </a>
        </strong> which describes how I built this.
    </li>
</ul>

